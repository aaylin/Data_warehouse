import configparser


# CONFIG
config = configparser.ConfigParser()
config.read('dwh.cfg')

# DROP TABLES

staging_events_table_drop = "DROP TABLE IF EXISTS staging_events"
staging_songs_table_drop = "DROP TABLE IF EXISTS staging_songs"
songplay_table_drop = "DROP TABLE IF EXISTS songplay"
user_table_drop = "DROP TABLE IF EXISTS users"
song_table_drop = "DROP TABLE IF EXISTS songs"
artist_table_drop = "DROP TABLE IF EXISTS artists"
time_table_drop = "DROP TABLE IF EXISTS time"

# CREATE TABLES
#staging tables

staging_events_table_create = ("""
                                  CREATE TABLE IF NOT EXISTS staging_events (
                                  event_id    BIGINT,
                                  artist      VARCHAR,
                                  auth        VARCHAR,
                                  firstName   VARCHAR,
                                  gender      VARCHAR,
                                  itemInSession VARCHAR,
                                  lastName    VARCHAR,
                                  length      VARCHAR,
                                  level       VARCHAR,
                                  location    VARCHAR,
                                  method      VARCHAR,
                                  page        VARCHAR,
                                  registration VARCHAR,
                                  sessionId   INTEGER SORTKEY DISTKEY,
                                  song        VARCHAR,
                                  status      INTEGER,
                                  ts          BIGINT,
                                  userAgent   VARCHAR,
                                  userId      INTEGER)
""")


staging_songs_table_create = ("""
                                 CREATE TABLE IF NOT EXISTS staging_songs (
                                 num_songs           INTEGER,
                                 artist_id           VARCHAR SORTKEY DISTKEY,
                                 artist_latitude     VARCHAR,
                                 artist_longitude    VARCHAR,
                                 artist_location     VARCHAR,
                                 artist_name         VARCHAR,
                                 song_id             VARCHAR,
                                 title               VARCHAR,
                                 duration            DECIMAL,
                                 year                INTEGER)
""")


#Fact Table
songplay_table_create= ("""CREATE TABLE IF NOT EXISTS songplays (
                                songplay_id INTEGER,
                                start_time  TIMESTAMP SORTKEY,
                                user_id     INTEGER DISTKEY,
                                level       VARCHAR,
                                song_id     VARCHAR,
                                artist_id   VARCHAR,
                                session_id  INTEGER NOT NULL,
                                location    VARCHAR,                                                                           user_agent  VARCHAR)
""")



#Dimension Tables
songs_table_create = ("""CREATE TABLE IF NOT EXISTS staging_songs (
                               song_id VARCHAR SORTKEY,
                               title VARCHAR,
                               artist_id VARCHAR NOT NULL,
                               year INTEGER,
                               duration DECIMAL)
""")


user_table_create = ("""CREATE TABLE IF NOT EXISTS users (
                               user_id INTEGER SORTKEY,
                               first_name VARCHAR, 
                               last_name VARCHAR,
                               gender VARCHAR,
                               level VARCHAR)
""")

song_table_create = ("""CREATE TABLE IF NOT EXISTS songs (
                               song_id VARCHAR SORTKEY,
                               title VARCHAR,
                               artist_id VARCHAR NOT NULL,
                               year INTEGER,
                               duration DECIMAL)
""")

artist_table_create = ("""CREATE TABLE IF NOT EXISTS artists (
                               artist_id VARCHAR SORTKEY, 
                               name VARCHAR, 
                               location VARCHAR,
                               latitude DECIMAL, 
                               longitude DECIMAL)
""")

time_table_create = ("""CREATE TABLE IF NOT EXISTS time (
                               start_time TIMESTAMP SORTKEY, 
                               hour INTEGER, 
                               day INTEGER, 
                               week INTEGER,
                               month INTEGER,
                               year INTEGER, 
                               weekday VARCHAR)
""")

# STAGING TABLES

staging_events_copy = ("""
                            COPY staging_events 
                            FROM {}
                            CREDENTIALS 'aws_iam_role={}'
                            REGION 'us-west-2'
                            JASON as 'auto'
                            """).format(config.get('S3', 'LOG_DATA'),
                                        config.get('S3', 'LOG_JSONPATH'))

staging_songs_copy = ("""  COPY staging_songs
                           FROM {}
                           CREDENTIALS 'aws_iam_role={}'
                           REGION 'us-west-2'
                           JASON as 'auto'
                           """).format(config.get('S3', 'SONG_DATA'), 
                                       config.get('IM_ROLE', 'ARN')

# FINAL TABLES

songplay_table_insert = (""" INSERT INTO songplays (start_time, user_id, level, song_id, artist_id, session_id, location, user_agent)
                             SELECT TIMESTAMP 'epoch' + se.ts/1000 * interval '1 second' as                                       start_time,
                                    se.userid,
                                    se.level,
                                    ss.song_id,
                                    ss.artist_id,
                                    se.sessionId,
                                    se.location,
                                    se.useragent
                             FROM staging_events se
                             JOIN staging_songs ss ON ( se.song = ss.title and se.artist = ss.artist_name)
                             WHERE se.page = 'NextSong'                                 
""")

user_table_insert = ("""   INSERT INTO users(user_id, first_name, last_name, gender, level)
                        SELECT DISTINCT se.userId,
                                        se.fistName,
                                        se.lastName,
                                        se.gender,
                                        se.level
                        FROM staging_events se
                        WHERE userId IS NOT NULL;                   
""")

song_table_insert = ("""   INSERT INTO songs(song_id, title, artist_id, year, duration)
                        SELECT DISTINCT ss.song_id,
                                        ss.title,
                                        ss.artist_id,
                                        ss.year, 
                                        ss.duration
                        FROM staging_songs ss
                        WHERE song_id IS NOT NULL;
""")

artist_table_insert = ("""   INSERT INTO artists(artist_id, name, location, latitude, longitude)
                          SELECT DISTINC ss.artist_id,
                                         ss.name,
                                         ss.year,
                                         ss.duration
                          FROM staging_songs ss
                          WHERE artist_id IS NOT NULL;
""")

time_table_insert = ("""  INSERT INTO time(start_time, hour, day, week, month, year, weekday)
                        SELECT DISTINCT  se.ts,
                                         EXTRACT(hour from se.ts),
                                         EXTRACT(day from se.ts),
                                         EXTRACT(week from se.ts),
                                         EXTRACT(month from se.ts),
                                         EXTRACT(year from se.ts),
                                         EXTRACT(weekday from se.ts)
                        FROM staging_events se
                        WHERE se.page = 'NextSong'; 
""")

# QUERY LISTS

create_table_queries = [staging_events_table_create, staging_songs_table_create, songplay_table_create, user_table_create, song_table_create, artist_table_create, time_table_create]
drop_table_queries = [staging_events_table_drop, staging_songs_table_drop, songplay_table_drop, user_table_drop, song_table_drop, artist_table_drop, time_table_drop]
copy_table_queries = [staging_events_copy, staging_songs_copy]
insert_table_queries = [songplay_table_insert, user_table_insert, song_table_insert, artist_table_insert, time_table_insert]
